import (
	"bufio"
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/url"
	"reflect"
	"strconv"
	"sync"
	"time"
)

{{ $main := . -}}

{{- range $main.Decls.NamedAnonDeclRenders }}
{{ . }}
{{- end }}


type DocumentURI = URI
type URI = String
type Void = struct{}

func isNone(it any) bool {
	if it == nil {
		return true
	}
	if has_is_none, _ := it.(interface{ IsNone() bool }); has_is_none != nil {
		return has_is_none.IsNone()
	}
	rv := reflect.ValueOf(it)
	if maybe, is := it.(reflect.Value); is {
		if rv = maybe; rv.IsValid() {
			if has_is_none, _ := maybe.Interface().(interface{ IsNone() bool }); has_is_none != nil {
				return has_is_none.IsNone()
			}
		}
	}
	return (!rv.IsValid()) || rv.IsZero() || ((rv.Kind() == reflect.Pointer) && isNone(rv.Elem()))
}

// URL is a convenience `url.Parse(string(it))` call that returns `nil` on error.
// If you do need the `error`, just use the original `url.Parse` directly.
func (it *URI) URL() (ret *url.URL) {
	if it.IsNone() { return nil }
	ret, _ = url.Parse(string(*it))
	return
}

type String string

// IsNone returns whether `it` is `nil` or the `string` zero value.
func (it *String) IsNone() bool { return it == nil || *it == "" }

// IfNone returns `ifNone` if `it` is `nil` or the `string` zero value; otherwise, `it.Value()` is returned.
func (it *String) IfNone(ifNone string) string {
	if it.IsNone() { return ifNone }
	return string(*it)
}

// Value returns the `string` zero value if `it` is `nil`; otherwise `*it` is returned.
func (it *String) Value() string { return it.IfNil("") }

// IfNil returns `ifNil` if `it` is `nil`; otherwise, `it.Value()` is returned.
func (it *String) IfNil(ifNil string) string {
	if it == nil { return ifNil }
	return string(*it)
}

type Integer int

// IsNone returns whether `it` is `nil` or the `int` zero value.
func (it *Integer) IsNone() bool { return it == nil || *it == 0 }

// IfNone returns `ifNone` if `it` is `nil` or the `int` zero value; otherwise, `it.Value()` is returned.
func (it *Integer) IfNone(ifNone int) int {
	if it.IsNone() { return ifNone }
	return int(*it)
}

// Value returns the `int` zero value if `it` is `nil`; otherwise `*it` is returned.
func (it *Integer) Value() int { return it.IfNil(0) }

// IfNil returns `ifNil` if `it` is `nil`; otherwise, `it.Value()` is returned.
func (it *Integer) IfNil(ifNil int) int {
	if it == nil { return ifNil }
	return int(*it)
}

type Uinteger uint

// IsNone returns whether `it` is `nil` or the `uint` zero value.
func (it *Uinteger) IsNone() bool { return it == nil || *it == 0 }

// IfNone returns `ifNone` if `it` is `nil` or the `uint` zero value; otherwise, `it.Value()` is returned.
func (it *Uinteger) IfNone(ifNone uint) uint {
	if it.IsNone() { return ifNone }
	return uint(*it)
}

// Value returns the `uint` zero value if `it` is `nil`; otherwise `*it` is returned.
func (it *Uinteger) Value() uint { return it.IfNil(0) }

// IfNil returns `ifNil` if `it` is `nil`; otherwise, `it.Value()` is returned.
func (it *Uinteger) IfNil(ifNil uint) uint {
	if it == nil { return ifNil }
	return uint(*it)
}

type Decimal float64

// IsNone returns whether `it` is `nil` or the `float64` zero value.
func (it *Decimal) IsNone() bool { return it == nil || *it == 0.0 /*|| *it == math.SmallestNonzeroFloat64*/ }

// IfNone returns `ifNone` if `it` is `nil` or the `float64` zero value; otherwise, `it.Value()` is returned.
func (it *Decimal) IfNone(ifNone float64) float64 {
	if it.IsNone() { return ifNone }
	return float64(*it)
}

// Value returns the `float64` zero value if `it` is `nil`; otherwise `*it` is returned.
func (it *Decimal) Value() float64 { return it.IfNil(0.0) }

// IfNil returns `ifNil` if `it` is `nil`; otherwise, `it.Value()` is returned.
func (it *Decimal) IfNil(ifNil float64) float64 {
	if it == nil { return ifNil }
	return float64(*it)
}

type Boolean bool

// IsNone returns whether `it` is `nil` or the `bool` zero value.
func (it *Boolean) IsNone() bool { return it == nil || !(bool)(*it) }

// IfNone returns `ifNone` if `it` is `nil` or the `bool` zero value; otherwise, `it.Value()` is returned.
func (it *Boolean) IfNone(ifNone bool) bool {
	if it.IsNone() { return ifNone }
	return bool(*it)
}

// Value returns the `bool` zero value if `it` is `nil`; otherwise `*it` is returned.
func (it *Boolean) Value() bool { return it.IfNil(false) }

// IfNil returns `ifNil` if `it` is `nil`; otherwise, `it.Value()` is returned.
func (it *Boolean) IfNil(ifNil bool) bool {
	if it == nil { return ifNil }
	return bool(*it)
}

type jsonRpcError struct {
	Code int `json:"code"`
	Message string `json:"message"`
}

func ptr[T any](value T) *T { return &value }

func iIf[T any](chk bool, ifTrue T, ifFalse T) T {
	if chk {
		return ifTrue
	}
	return ifFalse
}

type clientServerBase struct {
	stdioLock sync.Mutex // to sync writes to stdout
	stdout *bufio.Writer
	waiters map[string]func(any)

	LogPrefixSendRecvJsons string

	// Initialized is for informational purposes only, to the importer who shall not set or mutate them.
	// Its fields are set automatically at the appropriate initialization lifecycle instant.
	Initialized struct {
		Client *InitializeParams
		Server *InitializeResult
	}
}

func (it *clientServerBase) sendErrMsg(err any) {
	if err == nil {
		return
	}
	var json_rpc_err_msg *jsonRpcError
	if json_rpc_err_msg, _ = err.(*jsonRpcError); json_rpc_err_msg == nil {
		json_rpc_err_msg = &jsonRpcError{ Code: -32603, Message: fmt.Sprintf("%v", err) }
	}
	it.sendMsg(json_rpc_err_msg)
}

func (it *clientServerBase) sendMsg(jsonable any) {
	json_bytes,_ := json.Marshal(jsonable)
	it.stdioLock.Lock()
	defer it.stdioLock.Unlock()
	if it.LogPrefixSendRecvJsons != "" {
		println(it.LogPrefixSendRecvJsons + ".SEND>>" + string(json_bytes) + ">>")
	}
	_, _ = it.stdout.WriteString("Content-Length: ")
	_, _ = it.stdout.WriteString(strconv.Itoa(len(json_bytes)))
	_, _ = it.stdout.WriteString("\r\n\r\n")
	_, _ = it.stdout.Write(json_bytes)
}

func (it *clientServerBase) send(methodName string, params any, isReq bool, onResp func(any)) {
	req_id := strconv.FormatInt(time.Now().UnixNano(), 36)
	req := map[string]any{"method": methodName, "params": params}
	if onResp != nil {
		it.waiters[req_id] = onResp
	}
	if isReq {
		req["id"] = req_id
	}
	it.sendMsg(req)
}

// forever keeps reading and handling LSP JSON-RPC messages incoming over
// `in` until reading from `in` fails, then returns that IO read error.
func (it *clientServerBase) forever(in io.Reader, out io.Writer, handleIncoming func(map[string]any) *jsonRpcError) error {
	const buf_cap = 1024 * 1024

	it.stdout = bufio.NewWriterSize(out, buf_cap)
	it.waiters = map[string]func(any){}

	stdin := bufio.NewScanner(in)
	stdin.Buffer(make([]byte, buf_cap), buf_cap)
	stdin.Split(func(data []byte, ateof bool) (advance int, token []byte, err error) {
		if i_cl1 := bytes.Index(data, []byte("Content-Length: ")); i_cl1 >= 0 {
			datafromclen := data[i_cl1+16:]
			if i_cl2 := bytes.IndexAny(datafromclen, "\r\n"); i_cl2 > 0 {
				if clen, e := strconv.Atoi(string(datafromclen[:i_cl2])); e != nil {
					err = e
				} else if i_js1 := bytes.Index(datafromclen, []byte("{\"")); i_js1 > i_cl2 {
					if i_js2 := i_js1 + clen; len(datafromclen) >= i_js2 {
						advance = i_cl1 + 16 + i_js2
						token = datafromclen[i_js1:i_js2]
					}
				}
			}
		}
		return
	})

	for stdin.Scan() {
		raw := map[string]any{}
		json_bytes := stdin.Bytes()
		if it.LogPrefixSendRecvJsons != "" {
			it.stdioLock.Lock()
			println(it.LogPrefixSendRecvJsons + ".RECV<<" + string(json_bytes) + "<<")
	 		it.stdioLock.Unlock()
		}
		if err := json.Unmarshal(json_bytes, &raw); err != nil {
			it.sendErrMsg(&jsonRpcError{ Code: -32700, Message: err.Error() })
			continue
		}

		if raw["code"] != nil { // received an error message
			it.stdioLock.Lock()
			println(string(json_bytes)) // goes to stderr
			it.stdioLock.Unlock()
			continue
		}
		it.sendErrMsg(handleIncoming(raw))
	}
	return stdin.Err()
}

func clientServerOnResp[T any] (it *clientServerBase, onResp func(*T)) func(any) {
	if onResp == nil {
		return nil
	}
	return func(resultAsMap any) {
		var result T
		if resultAsMap != nil {
			json_bytes, _ := json.Marshal(resultAsMap)
			if err := json.Unmarshal(json_bytes, &result); err != nil {
				it.sendErrMsg(err)
				return
			}
		}
		onResp(iIf(resultAsMap == nil, nil, &result))
	}
}

func clientServerHandleIncoming[T any] (it *clientServerBase, handler func (*T) (any, error), msgMethodName string, msgIdMaybe any, msgParams any) {
	var req_id string
	if msgIdMaybe != nil {
		req_id = fmt.Sprintf("%v", msgIdMaybe)
	}
	if handler == nil {
		if req_id != "" {
			it.sendErrMsg(errors.New("unimplemented: " + msgMethodName))
		}
		return
	}
	var params T
	if msgParams != nil {
		json_bytes, _ := json.Marshal(msgParams)
		if err := json.Unmarshal(json_bytes, &params); err != nil {
			it.sendErrMsg(&jsonRpcError{ Code: -32602, Message: err.Error() })
			return
		}
	}
	go func(params *T) {
		if msgParams == nil {
			params = nil
		}
		result, err := handler(params)
		resp := map[string]any {
			"result": result,
			"id": req_id,
		}
		if err != nil {
			if msgIdMaybe != nil {
				resp["error"] = &jsonRpcError{ Code: -32603, Message: fmt.Sprintf("%v", err) }
			}else {
				it.sendErrMsg(err)
				return
			}
		}
		if msgIdMaybe != nil {
			it.sendMsg(resp)
		}
	}(&params)
}
