
import (
	"os"
)

{{ $main := . -}}

type Server struct {
	clientServerBase

	Lang struct {
		CompletionTriggerChars []string
		SignatureTriggerChars []string
		Commands []string
	}

	{{ range $main.Decls.Extras -}}
	{{- $msg := . -}}
	{{- if and $msg.IsClientToServer (not $msg.IsInit) -}}
	{{- range $msg.DocLines }}
	// {{ . }}
	{{- end }}
	On_{{ $msg.MethodNameSafe }} func(params *{{ $msg.UnaryParamsTypeName }}) (any, error)
	{{ end -}}
	{{- end -}}
}

{{- range $main.Decls.Extras -}}
{{- $msg := . }}
{{- if $msg.IsServerToClient }}
{{- range $msg.DocLines }}
// {{ . }}
{{- end }}
func (it *Server) {{if $msg.IsReq}}Request{{else}}Notify{{end}}_{{ $msg.MethodNameSafe }} (params {{ $msg.UnaryParamsTypeName }}{{if $msg.IsReq}}, onResp func({{- $main.DoType $msg.ResultType -}}){{end}}) {
	var on_resp func(any){{- if $msg.IsReq -}} = clientServerOnResp(&it.clientServerBase, onResp){{- end }}
	go it.send("{{$msg.Method}}", params, {{ $msg.IsReq }}, on_resp)
}
{{- end }}
{{- end }}

func (it *Server) handleIncoming(raw map[string]any) *jsonRpcError {
	msg_id, msg_method :=raw["id"], raw["method"]

	switch msg_method, _ := msg_method.(string); msg_method {
	{{- range $main.Decls.Extras -}}
	{{- $msg := . }}
	{{- if and $msg.IsClientToServer (not $msg.IsInit) }}
	case "{{$msg.Method}}":
		clientServerHandleIncoming(&it.clientServerBase, it.On_{{ $msg.MethodNameSafe }}, msg_method, msg_id, raw["params"])
	{{- end }}
	{{- end }}
	case "initialize":
		clientServerHandleIncoming(&it.clientServerBase, func(params *InitializeParams) (any, error) {
			init := &it.Initialized
			init.Client = params
			init.Server = &InitializeResult{
				ServerInfo: &struct {
					Name    string  `json:"name,omitempty"`
					Version *String `json:"version,omitempty"`
				}{Name: os.Args[0]},
			}
			caps := &init.Server.Capabilities
			if it.On_textDocument_didClose != nil || it.On_textDocument_didOpen != nil || it.On_textDocument_didChange != nil {
				caps.TextDocumentSync = &TextDocumentSyncOptionsOrTextDocumentSyncKind{
					TextDocumentSyncOptions: &TextDocumentSyncOptions{
						OpenClose: ptr(Boolean(it.On_textDocument_didClose != nil || it.On_textDocument_didOpen != nil)),
						Change:    iIf(it.On_textDocument_didChange != nil, TextDocumentSyncKindFull, TextDocumentSyncKindNone),
					},
				}
			}
			if it.On_textDocument_completion != nil {
				caps.CompletionProvider = &CompletionOptions{TriggerCharacters: it.Lang.CompletionTriggerChars}
			}
			if it.On_textDocument_signatureHelp != nil {
				caps.SignatureHelpProvider = &SignatureHelpOptions{TriggerCharacters: it.Lang.SignatureTriggerChars}
			}
			if it.On_textDocument_codeLens != nil {
				caps.CodeLensProvider = &CodeLensOptions{}
			}
			if it.On_textDocument_rename != nil {
				caps.RenameProvider = &BooleanOrRenameOptions{RenameOptions: &RenameOptions{
					PrepareProvider: ptr(Boolean(it.On_textDocument_prepareRename != nil)),
				}}
			}
			if it.On_workspace_executeCommand != nil {
				caps.ExecuteCommandProvider = &ExecuteCommandOptions{Commands: it.Lang.Commands}
			}
			if it.On_textDocument_hover != nil {
				caps.HoverProvider = &BooleanOrHoverOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_declaration != nil {
				caps.DeclarationProvider = &BooleanOrDeclarationOptionsOrDeclarationRegistrationOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_definition != nil {
				caps.DefinitionProvider = &BooleanOrDefinitionOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_typeDefinition != nil {
				caps.TypeDefinitionProvider = &BooleanOrTypeDefinitionOptionsOrTypeDefinitionRegistrationOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_implementation != nil {
				caps.ImplementationProvider = &BooleanOrImplementationOptionsOrImplementationRegistrationOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_references != nil {
				caps.ReferencesProvider = &BooleanOrReferenceOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_documentHighlight != nil {
				caps.DocumentHighlightProvider = &BooleanOrDocumentHighlightOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_documentSymbol != nil {
				caps.DocumentSymbolProvider = &BooleanOrDocumentSymbolOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_codeAction != nil {
				caps.CodeActionProvider = &BooleanOrCodeActionOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_formatting != nil {
				caps.DocumentFormattingProvider = &BooleanOrDocumentFormattingOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_rangeFormatting != nil {
				caps.DocumentRangeFormattingProvider = &BooleanOrDocumentRangeFormattingOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_selectionRange != nil {
				caps.SelectionRangeProvider = &BooleanOrSelectionRangeOptionsOrSelectionRangeRegistrationOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_prepareCallHierarchy != nil && it.On_callHierarchy_incomingCalls != nil && it.On_callHierarchy_outgoingCalls != nil {
				caps.CallHierarchyProvider = &BooleanOrCallHierarchyOptionsOrCallHierarchyRegistrationOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_prepareTypeHierarchy != nil && it.On_typeHierarchy_subtypes != nil && it.On_typeHierarchy_supertypes != nil {
				caps.TypeHierarchyProvider = &BooleanOrTypeHierarchyOptionsOrTypeHierarchyRegistrationOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_inlineValue != nil {
				caps.InlineValueProvider = &BooleanOrInlineValueOptionsOrInlineValueRegistrationOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_textDocument_inlayHint != nil {
				caps.InlayHintProvider = &BooleanOrInlayHintOptionsOrInlayHintRegistrationOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_workspace_symbol != nil {
				caps.WorkspaceSymbolProvider = &BooleanOrWorkspaceSymbolOptions{Boolean: ptr(Boolean(true))}
			}
			if it.On_workspace_didChangeWorkspaceFolders != nil {
				caps.Workspace = &struct {
					WorkspaceFolders *WorkspaceFoldersServerCapabilities `json:"workspaceFolders,omitempty"`
					FileOperations   *FileOperationOptions               `json:"fileOperations,omitempty"`
				}{
					WorkspaceFolders: &WorkspaceFoldersServerCapabilities{
						Supported: ptr(Boolean(it.On_workspace_didChangeWorkspaceFolders != nil)),
						ChangeNotifications: &StringOrBoolean{
							Boolean: ptr(Boolean(it.On_workspace_didChangeWorkspaceFolders != nil)),
						},
					},
				}
			}

			return init.Server, nil
		}, msg_method, msg_id, raw["params"])
	default: // msg is an incoming Request or Notification
		return &jsonRpcError{ Code: int(ErrorCodesMethodNotFound), Message: "unknown method: " + msg_method}
	}

	return nil
}

// Forever keeps reading and handling LSP JSON-RPC messages incoming over `os.Stdin`
// until reading from `os.Stdin` fails, then returns that IO read error.
func (it *Server) Forever() error {
	{ // users shouldn't have to set up no-op handlers for these routine teardown lifecycle messages:
		old_shutdown, old_exit, old_initialized := it.On_shutdown, it.On_exit, it.On_initialized
		it.On_shutdown = func(params *Void) (any, error) {
			if old_shutdown != nil {
				return old_shutdown(params)
			}
			return nil, nil
		}
		it.On_exit = func(params *Void) (any, error) {
			if old_exit != nil {
				return old_exit(params)
			}
			os.Exit(0)
			return nil, nil
		}
		it.On_initialized = func(params *InitializedParams) (any, error) {
			if it.On_workspace_didChangeWatchedFiles != nil {
				it.Request_client_registerCapability(RegistrationParams{
					Registrations: []Registration{
						{Method: "workspace/didChangeWatchedFiles", Id: "workspace/didChangeWatchedFiles",
							RegisterOptions: DidChangeWatchedFilesRegistrationOptions{Watchers: []FileSystemWatcher{
								{Kind: WatchKindChange | WatchKindCreate | WatchKindDelete,
									GlobPattern: GlobPattern(&PatternOrRelativePattern{Pattern: ptr(String("**/*"))})}}}},
					},
				}, func(Void) {})
			}
			if old_initialized != nil {
				return old_initialized(params)
			}
			return nil, nil
		}
	}

	return it.forever(os.Stdin, os.Stdout, it.handleIncoming)
}
